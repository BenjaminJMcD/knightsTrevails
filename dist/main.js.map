{"version":3,"file":"main.js","mappings":"mBA+CO,SAASA,EAAgBC,GAE5B,OADgBA,EAAM,GAAK,EAAEA,EAAM,EAEvC,CAIO,SAASC,EAAeC,GAC3B,IAAIF,EAAQ,GACRG,EAAID,EAAO,EACXE,EAAIC,KAAKC,MAAMJ,EAAO,GAE1B,OADAF,EAAMO,KAAKJ,EAAEC,GACNJ,CACX,CAGA,IAAIQ,EA7DG,WACH,IAAIA,EAAU,GAEd,IAAK,IAAIC,EAAE,EAAGA,EAAE,GAAIA,IAAK,CAErB,IAAIC,EAAOF,EAAQC,GAAK,GAEpBE,EAAKF,EAAE,EACPE,EAAK,IAAMF,EAAE,GAAI,GAAKA,EAAE,GAAK,GAC7BC,EAAKH,KAAKI,GAEd,IAAIC,EAAKH,EAAE,GACPG,EAAK,IAAMH,EAAE,GAAK,GAClBC,EAAKH,KAAKK,GAEd,IAAIC,EAAKJ,EAAE,GACPI,EAAK,IAAMJ,EAAE,GAAK,GAClBC,EAAKH,KAAKM,GAEd,IAAIC,EAAKL,EAAE,GACPK,EAAK,IAAML,EAAE,GAAK,GAAKA,EAAE,GAAK,GAC9BC,EAAKH,KAAKO,GAEd,IAAIC,EAAKN,EAAE,EACPM,EAAK,GAAKN,EAAE,GAAK,GAAKA,EAAE,GAAK,GAC7BC,EAAKH,KAAKQ,GAEd,IAAIC,EAAKP,EAAE,GACPO,EAAK,GAAKP,EAAE,GAAK,GACjBC,EAAKH,KAAKS,GAEd,IAAIC,EAAKR,EAAE,GACPQ,EAAK,GAAKR,EAAE,GAAK,GACjBC,EAAKH,KAAKU,GAEd,IAAIC,EAAKT,EAAE,GACPS,EAAK,GAAKT,EAAE,GAAK,GAAKA,EAAE,GAAK,GAC7BC,EAAKH,KAAKW,EAElB,CACA,OAAOV,CACX,CAoBcW,IAEP,SAAqBC,EAAQC,GAEhC,IAAIC,EAAWvB,EChEP,CAAC,EAAE,IDiEPwB,EAASxB,ECjEE,CAAC,EAAE,IDoEdyB,EAAQ,CAAC,CAACF,IAEVG,EAAU,GAEd,KAAOD,EAAME,QAAQ,CAGjB,IAAIC,EAAOH,EAAMI,QAGbC,EAAMF,EAAKA,EAAKD,OAAO,GAM3B,GAHAD,EAAQlB,KAAKsB,GAGTA,GAAON,EAAQ,CACf,IAAIO,EAAcH,EAAKD,OAAO,EAC1BK,EAAS,GACbJ,EAAKK,SAASC,IACVF,EAAOxB,KAAKN,EAAegC,GAAM,IAErCC,QAAQC,IAAI,WAAWL,iDACvBC,EAAOC,SAASC,IACZC,QAAQC,IAAIF,EAAK,IAErB,KACJ,CAGYzB,EAAQqB,GAEdG,SAASC,IAENR,EAAQW,SAASH,IAClBT,EAAMjB,KAAK,IAAIoB,EAAMM,GACzB,GAGR,CAEJ,CC7GAI,E","sources":["webpack://knightstrevails/./src/bts.js","webpack://knightstrevails/./src/index.js"],"sourcesContent":["\n// FUNCTION TO CREATE ADJACENCY LIST USING MATRIX GRID NUMBERS\nexport function createAdjList() {\n    let adjList = [];\n\n    for (let i=0; i<64; i++) {\n\n        let node = adjList[i] = [];\n\n        let lt = i+6;\n        if (lt < 64 && i%8 !=0 && i%8 != 1) {\n            node.push(lt);\n        }\n        let tl = i+15;\n        if (tl < 64 && i%8 != 0) {\n            node.push(tl);\n        }\n        let tr = i+17;\n        if (tr < 64 && i%8 != 7) {\n            node.push(tr);\n        }\n        let rt = i+10;\n        if (rt < 64 && i%8 != 7 && i%8 != 6) {\n            node.push(rt);\n        }\n        let rb = i-6;\n        if (rb > 0 && i%8 != 7 && i%8 != 6) {\n            node.push(rb);\n        }\n        let br = i-15;\n        if (br > 0 && i%8 != 7) {\n            node.push(br);\n        }\n        let bl = i-17;\n        if (bl > 0 && i%8 != 0) {\n            node.push(bl);\n        }\n        let lb = i-10;\n        if (lb > 0 && i%8 != 0 && i%8 != 1) {\n            node.push(lb);\n        }\n    }\n    return adjList\n}\n\n// FUNCTION TO CONVERT COORD TO MATRIX#\n\nexport function convertToMatrix(coord) {\n    let matrixNum = coord[0] + 8*coord[1];\n    return matrixNum;\n}\n\n// FUNCTION TO CONVERT MATRIX# TO COORD\n\nexport function convertToCoord(matrix) {\n    let coord = [];\n    let x = matrix%8;\n    let y = Math.floor(matrix/8);\n    coord.push(x,y);\n    return coord;\n}\n\n// INITIALIZE ADJACENCY LIST\nlet adjList = createAdjList();\n\nexport function knightMoves(coord1, coord2) {\n\n    let startPos = convertToMatrix(coord1);\n    let endPos = convertToMatrix(coord2);\n\n    // INITIALIZE QUEUE W STARTING POSITION\n    let queue = [[startPos]];\n    // KEEP TRACK OF VISITED SPOTS SO NO DUPLICATES\n    let visited = [];\n    \n    while (queue.length) {\n        \n        // PATH = FIRST IN QUEUE\n        let path = queue.shift();\n\n        // LAST IN PATH = POSITION TO CHECK MOVES\n        let pos = path[path.length-1];\n\n        // ADD POSITION TO VISITED ARRAY\n        visited.push(pos);\n    \n        // IF CURRENT POSITION IS TARGET, PRINT TO CONSOLE AND END WHILE LOOP\n        if (pos == endPos) {\n            let numberMoves = path.length-1;\n            let coords = [];\n            path.forEach((move) => {\n                coords.push(convertToCoord(move));\n            });\n            console.log(`It took ${numberMoves} moves to get from starting point to target:`);\n            coords.forEach((move) => {\n                console.log(move);\n            });\n            break;\n        }\n    \n        // ARRAY OF POSSIBLE MOVES FOR POSITION\n        let moves = adjList[pos];\n    \n        moves.forEach((move) => {\n            // IF POSSIBLE MOVES HAVENT BEEN VISITED, MAINTAIN PATH AND ADD MOVE IN LAST POSITION OF QUEUE\n            if (!visited.includes(move)) {\n                queue.push([...path, move])\n            }\n        })\n\n    }\n \n}\n\n","import { knightMoves } from \"./bts\";\n\n\nknightMoves([0,0], [6,1]);\n"],"names":["convertToMatrix","coord","convertToCoord","matrix","x","y","Math","floor","push","adjList","i","node","lt","tl","tr","rt","rb","br","bl","lb","createAdjList","coord1","coord2","startPos","endPos","queue","visited","length","path","shift","pos","numberMoves","coords","forEach","move","console","log","includes","knightMoves"],"sourceRoot":""}